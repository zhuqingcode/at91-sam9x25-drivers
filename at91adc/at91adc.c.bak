/******************************************************************************
| File name : at91adc.c |
| Description : Source code for the EDAQ ADC driver. This driver supports two |
| : adc channesl with minor numbers 0 and 1. When the module is |
| : is inserted to kernel, TC0 module is setup to generate interr-|
| : upt every 1 msec. Both ADC channels are sampled in the ISR |
| : and the samples are copied into a ring buffer. Sampling rate |
| : can be changed by changing SAMPLE_INTERVAL_MS. In response to |
| : the read from user space, latest requested number of samples |
| : are returned as an unsigned short array. Channel 0/1 data is |
| : returned depending on the minor number of the device opened. |
| History : |
| ### Date Author Comments |
| 001 30-Jul-08 S. Thalore Initial creation |
| Copyright 2008 | 
| This program is free software: you can redistribute it and/or modify |
| it under the terms of the GNU General Public License as published by |
| the Free Software Foundation, either version 3 of the License, or |
| (at your option) any later version. |
| |
| This program is distributed in the hope that it will be useful, |
| but WITHOUT ANY WARRANTY; without even the implied warranty of |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the |
| GNU General Public License for more details. |
| |
| You should have received a copy of the GNU General Public License |
| along with this program. If not, see <http://www.gnu.org/licenses/>. |
******************************************************************************/
#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/init.h>
#include <linux/version.h>      /* for linux version */
#include <linux/types.h>        /* size_t */
#include <linux/fs.h>           /* everything... */
#include <linux/errno.h>        /* error codes */
#include <linux/mm.h>
#include <linux/sched.h>
#include <linux/cdev.h>
#include <linux/input.h>
#include <linux/miscdevice.h>
#include <linux/irqreturn.h>
#include <linux/clk.h>
#include <linux/irq.h>
#include <linux/interrupt.h>
#include <linux/delay.h>
#include <asm/io.h>
#include <asm/system.h>
#include <asm/uaccess.h>
#include <linux/slab.h> //zhuqing
#if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 26)
//warning build for Linux-2.6.27 or above
#include <mach/hardware.h>
#include <mach/at91_pio.h>
#include <mach/gpio.h>
#include <mach/at91_tc.h>
#include <mach/at91_adc.h>
//#include <mach/at91sam9x5.h>
#else 
//warning build for Linux-2.6.26 or earlier
#include <asm/arch/gpio.h>
#include <asm/arch/hardware.h>
#endif
//----------------------------
struct timer_list adc_timer;

void adc_timer_setup(unsigned char ntime)
{
	/*** Initialize the timer structure***/
	init_timer(&stk_rtcds1307_timer) ;
	stk_rtcds1307_timer.function = stk_rtcds1307_handler ;
	stk_rtcds1307_timer.expires = jiffies + HZ*ntime; // HZ = 100 
	/***Initialisation ends***/
	return;
}

void adc_handle_handler(void)
{
	//process
	unsigned char ntime = 10; // 30
	// add time
	add_timer(&stk_rtcds1307_timer) ;
	return;
}	
//----------------------------

// Set the period between reads (max allowed value 1000)
#define SAMPLE_INTERVAL_MS 5


// Assume client always reads data at 1 second intervals; so the client will read:
#define READ_SAMPLES 1000/SAMPLE_INTERVAL_MS
// Allocate to be at least 5 x bigger so that ISR will never catch up with reading.
#define MAX_ADCSAMPLES 5* READ_SAMPLES


//int at91adc_devno;
//struct cdev at91adc_cdev;
struct file_operations at91adc_fops;

//unsigned short  *at91adc_pbuf0, *at91adc_pbuf1, at91adc_appidx;

//void __iomem *at91tc0_base;
void __iomem *at91adc_base;
struct clk *at91adc_clk;
//struct clk *at91tc0_clk;

/*****************************************************************************************
| Module open: |
*****************************************************************************************/
static int at91adc_open (struct inode *inode, struct file *filp) 
{ 
	return 0; 
} 

/*****************************************************************************************
| Module close: |
*****************************************************************************************/
static int at91adc_release (struct inode *inode, struct file *filp) 
{ 
	return 0; 
} 

/*****************************************************************************************
| Module read: Return last READ_SAMPLES samples from ADC chan 0 or 1 depending on the |
| minor number. |
*****************************************************************************************/
static ssize_t at91adc_read (struct file *filp, char  __user *buf, size_t bufsize, loff_t *f_pos)
{
	int i;
	unsigned short at91adc_buf[11];
	memset(at91adc_buf,0x0,sizeof(at91adc_buf));
	iowrite32(AT91_ADC_START, (at91adc_base + AT91_ADC_CR));//start to convert
	udelay(100);
	//printk(KERN_INFO"reading adc channel data...\n");
	for(i = 0;i < 11;i++)
	{
		if(i >= 5)
		{
			at91adc_buf[i] = ioread32(at91adc_base + AT91_ADC_CHR(i + 1));//AD5 不用
			at91adc_buf[i] &= 0x3ff;//10 bit
		}
		else
		{
			at91adc_buf[i] = ioread32(at91adc_base + AT91_ADC_CHR(i));
			at91adc_buf[i] &= 0x3ff;//10 bit
		}
		
		
	}

	if (copy_to_user(buf, at91adc_buf, sizeof(at91adc_buf)) != 0) 
	{
		return -EFAULT;
	}
	return 0;
	
	
	
}

struct file_operations at91adc_fops = { 
	.owner = THIS_MODULE, 
	.open = at91adc_open, 
	.read = at91adc_read, 
	.release = at91adc_release, 
}; 
static struct miscdevice at91adc_dev = {
	.minor = MISC_DYNAMIC_MINOR,
	.name = "at91adc",
	.fops = &at91adc_fops,
};

/*****************************************************************************************
| Timer counter 0 ISR: Sample both ADC channels and copy the data to module ring buffer. |
*****************************************************************************************/


/*****************************************************************************************
| Module initialization: Allocate device numbers, register device, setup ADC and timer |
| counter registers for 100 msec periodic sampling. |
*****************************************************************************************/
static int __init at91adc_init (void)
{
	int ret; 
	ret = misc_register(&at91adc_dev);
	
	if (ret) 
	{ 
    	printk("can't register major number\n"); 
    	return ret; 
	}

	// Initialize ADC. The following two lines set the appropriate PMC bit 
	// for the ADC. Easier than mapping PMC registers and then setting the bit.
	at91adc_clk = clk_get(NULL, // Device pointer - not required.
	"adc_clk"); // Clock name.
	clk_enable(at91adc_clk);

	// Map ADC registers to the current address space.
	at91adc_base = ioremap_nocache(AT91SAM9X5_BASE_ADC, // Physical address
	64); // Number of bytes to be mapped.
	if (at91adc_base == NULL)
	{
		printk(KERN_INFO "at91adc: ADC memory mapping failed\n");
		ret = -EACCES;
		goto exit_4;
	}

	// MUX GPIO pins for ADC (peripheral A) operation 
	at91_set_C_periph(AT91_PIN_PB6, 0);
	at91_set_C_periph(AT91_PIN_PB7, 0);
	at91_set_C_periph(AT91_PIN_PB8, 0);
	at91_set_C_periph(AT91_PIN_PB9, 0);
	at91_set_C_periph(AT91_PIN_PB10, 0);
	at91_set_C_periph(AT91_PIN_PB11, 0);
	at91_set_C_periph(AT91_PIN_PB12, 0);
	at91_set_C_periph(AT91_PIN_PB13, 0);
	at91_set_C_periph(AT91_PIN_PB14, 0);
	at91_set_C_periph(AT91_PIN_PB15, 0);
	//at91_set_C_periph(AT91_PIN_PB16, 0);//不用做AD
	at91_set_C_periph(AT91_PIN_PB17, 0);

	// Reset the ADC
	iowrite32(AT91_ADC_SWRST, (at91adc_base + AT91_ADC_CR));

	// Enable both ADC channels
	//iowrite32((AT91_ADC_CH(1) | AT91_ADC_CH(0)), (at91adc_base + AT91_ADC_CHER));
	iowrite32((AT91_ADC_CH(1) | AT91_ADC_CH(0)
	| AT91_ADC_CH(3) | AT91_ADC_CH(2)
	//| AT91_ADC_CH(5) 
	| AT91_ADC_CH(4)
	| AT91_ADC_CH(7) | AT91_ADC_CH(6)
	| AT91_ADC_CH(9) | AT91_ADC_CH(8)
	| AT91_ADC_CH(11) | AT91_ADC_CH(10)),  (at91adc_base + AT91_ADC_CHER));
	
	// Configure ADC mode register.
	// From table 43-31 in page #775 and page#741 of AT91SAM9260 user manual:
	// Maximum ADC clock frequency = 5MHz = MCK / ((PRESCAL+1) * 2)
	// PRESCAL = ((MCK / 5MHz) / 2) -1 = ((100MHz / 5MHz)/2)-1) = 9
	// Maximum startup time = 15uS = (STARTUP+1)*8/ADC_CLOCK
	// STARTUP = ((15uS*ADC_CLOK)/8)-1 = ((15uS*5MHz)/8)-1 = 9
	// Minimum hold time = 1.2uS = (SHTIM+1)/ADC_CLOCK
	// SHTIM = (1.2uS*ADC_CLOCK)-1 = (1.2uS*5MHz)-1 = 5, Use 9 to ensure 2uS hold time.
	// Enable sleep mode and hardware trigger from TIOA output from TC0.

	//iowrite32((AT91_ADC_SHTIM_(9) | AT91_ADC_STARTUP_(9) | AT91_ADC_PRESCAL_(9) | 
	//AT91_ADC_SLEEP | AT91_ADC_TRGEN), (at91adc_base + AT91_ADC_MR));
	
	iowrite32((AT91_ADC_SHTIM_(9) | AT91_ADC_STARTUP_(9) | AT91_ADC_PRESCAL_(9) | 
	AT91_ADC_SLEEP), (at91adc_base + AT91_ADC_MR));
	
printk(KERN_INFO "at91adc: Loaded module\n");
return 0;

exit_6:
//iounmap(at91tc0_base); 

exit_5:
//clk_disable(at91tc0_clk);
//iounmap(at91adc_base);

exit_4:
clk_disable(at91adc_clk);

exit_3:


exit_2:
// Free device number allocated.
//unregister_chrdev_region(at91adc_devno, // allocated device number
misc_deregister(&at91adc_dev);
//2); // number of devices

exit_1:
return ret;
}

static void __exit at91adc_exit (void) 
{
	// Reset PMC bit for ADC and TC0
	clk_disable(at91adc_clk);
	//clk_disable(at91tc0_clk);

	// Free TC0 IRQ.
	//free_irq(AT91SAM9X5_ID_TCB, // Interrupt number
	//NULL); // Private data for shared interrupts

	// Unmap ADC and TC0 register map.
	iounmap(at91adc_base);
	//iounmap(at91tc0_base);

	// Free kernel memory allocated
	//kfree(at91adc_pbuf0); 
	//kfree(at91adc_pbuf1);

	// Free device number allocated.
	//unregister_chrdev_region(at91adc_devno, // allocated device number
	misc_deregister(&at91adc_dev);
	//2); // number of devices

	printk(KERN_INFO "at91adc: Unloaded module\n");
}




module_init(at91adc_init);
module_exit(at91adc_exit);

MODULE_AUTHOR("zhuqing@talentinfo.com.cn");
MODULE_DESCRIPTION("Initialize and read AT91SAM9X5 ADC channels");
MODULE_LICENSE("GPL");

